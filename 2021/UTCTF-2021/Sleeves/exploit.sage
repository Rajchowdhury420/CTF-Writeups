from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from sage.all import *

r1 = 135654478787724889653092564298229854384328195777613605080225945400441433200
r2 = 16908147529568697799168358355733986815530684189117573092268395732595358248
ct = "c2c59febe8339aa2eee1c6eddb73ba0824bfe16d410ba6a2428f2f6a38123701"

p = 115792089210356248762697446949407573530086143415290314195533631308867097853951
b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b

EC = EllipticCurve(GF(p), [-3,b])

P = EC.lift_x(110498562485703529190272711232043142138878635567672718436939544261168672750412)
Q = EC.lift_x(67399507399944999831532913043433949950487143475898523797536613673733894036166)


# ATTACK
# https://youtu.be/nybVFJVXbww

n = 2**8 # 8 missing bits
pos_rQ = []

print("[!] Finding Possible rQ...")

for i in range(n):
	rQ_x = int(bin(r1)[2:] + f"{i:08b}", 2)
	try:
		rQ = EC.lift_x(Integer(rQ_x))
		# print(f"i: {i} | rQ: {rQ}")
		pos_rQ.append(rQ)		
	except:
		# print("No such Point!")
		pass

print(f"[+] Total No. of possible rQ = {len(pos_rQ)}")

# Find e such that P = eQ

print("[!] Finding e such that P = eQ")

for e in range(1000):
	if P == e*Q:
		print(f"[+] Possible e: {e}")
		break

# e = 173

# Get state

for rQ in pos_rQ:
	state = Integer((e*rQ)[0])
	sP = state*P
	r = Integer(sP[0])
	rQ_i = r*Q
	if Integer(rQ_i[0])>>8 == r2:
		print(f"[+] Found State = {state}")
		break

# Predict
state = Integer((r*P)[0])
sP = state*P
r = Integer(sP[0])
rQ = r*Q
r3 = Integer(rQ[0])>>8

# Decrypt
r3 = str(r3)
aes_key = SHA256.new(r3.encode('ascii')).digest()
cipher = AES.new(aes_key, AES.MODE_ECB)
ct = bytes.fromhex(ct)
pt = cipher.decrypt(ct)

print(f"[+] pt = {pt}")

# utflag{numbers_up_my_sl33v3_l0l}
