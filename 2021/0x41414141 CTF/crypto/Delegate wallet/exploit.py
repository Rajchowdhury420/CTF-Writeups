import math
import functools
from pwn import *

"""
Let the script RUN again and again until we
get feasible PRNs to predict the next state
"""

reduce = functools.reduce
gcd = math.gcd

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = egcd(b % a, a)
        return (g, y - (b // a) * x, x)

def modinv(b, n):
    g, x, _ = egcd(b, n)
    if g == 1:
        return x % n

def crack_unknown_increment(states, modulus, multiplier):
    increment = (states[1] - states[0]*multiplier) % modulus
    return modulus, multiplier, increment

def crack_unknown_multiplier(states, modulus):
    multiplier = (states[2] - states[1]) * modinv(states[1] - states[0], modulus) % modulus
    return crack_unknown_increment(states, modulus, multiplier)

def crack_unknown_modulus(states):
    diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]
    zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]
    modulus = abs(reduce(gcd, zeroes))
    return crack_unknown_multiplier(states, modulus)

def preict_state(curr_state, n, m, c):
	state = (curr_state * m + c) % n
	return state

def main():
	# http://185.172.165.118:4008/
	# http://161.97.176.150:4008/

	# r = remote('0.0.0.0', 4008)
	r = remote('185.172.165.118', 4008)
	r.recvline() 	# propmt
	r.recvline() 	# propmt

	"""
	1) Generate a new wallet seed
	2) Guess the next wallet seed
	"""

	log.info("Collecting States...")
	sample_size = 6

	states = []
	for i in range(sample_size):
		r.sendline('1')
		state = r.recvline()[2:-1].decode()
	
		r.recvline() 	# propmt
		r.recvline() 	# propmt

		states.append(int(state))

	try:
		n, m, c = crack_unknown_modulus(states)		# n = modulus, m = multiplier, c = increment
		curr_state = states[-1]

		next_state = preict_state(curr_state, n,m,c)
		print(next_state)

		r.sendline('2')
		r.sendline(str(next_state))
		log.success("Success !!!")
	except:
		log.warning("Could not Predict Next State...Trying Again...")
		main()
	
	r.interactive()


if __name__ == '__main__':
	main()

# flag{NBD_7H3Y_U53D_0ffsh1ft4532}
